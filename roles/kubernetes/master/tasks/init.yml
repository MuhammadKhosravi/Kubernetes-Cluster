---

- name: Reset Kubernetes component
  shell: "kubeadm reset --force --cri-socket=/var/run/{{ container_runtime }}/{{ container_runtime }}.sock"
  register: reset_cluster

- name: Init Kubernetes cluster
  when: reset_cluster is succeeded
  shell: |
    kubeadm init --service-cidr {{ service_cidr }} \
                 --kubernetes-version {{ kube_version }} \
                 --pod-network-cidr {{ pod_network_cidr }} \
                 --control-plane-endpoint {{ control_plane_endpoint }}:{{ connect_port }} \
                 --token {{ token }} \
                 --apiserver-advertise-address {{ master1 }} \
                 --cri-socket=/var/run/{{ container_runtime }}/{{ container_runtime }}.sock  \
                 --upload-certs
  register: init_cluster
  environment:
    no_proxy: "$no_proxy,.svc,.svc.cluster.local"


- name: Save certs 
  when: init_cluster is succeeded
  shell: |
    kubeadm init phase upload-certs --upload-certs
  register: certs


- name: Save join command
  when: init_cluster is succeeded
  shell: |
    kubeadm token create --print-join-command
  register: command

- name: Set fact for certs and join command 
  set_fact:
    certificates: "{{ certs.stdout_lines[2] }}"
    join_command: "{{ command.stdout }}"

- name: Save commands for later use
  copy: 
    content: "{{ join_command }} --certificate-key  {{ certificates }}"
    dest: "/tmp/join"
  delegate_to: localhost

- name: Create Kubernetes config directory
  file:
    path: ".kube/"
    state: directory

- name: Copy admin.conf to Home directory
  when: init_cluster is succeeded
  copy:
    src: "{{ kubeadmin_config }}"
    dest: ".kube/config"
    owner: "{{ ansible_user | default(ansible_user_id) }}"
    group: "{{ ansible_user | default(ansible_user_id) }}"
    mode: 0755
    remote_src: true

